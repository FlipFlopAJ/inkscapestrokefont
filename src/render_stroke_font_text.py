#!/usr/bin/env python
# -*- coding: utf-8 -*-
"""
Inkscape extension to render text with the stroke fonts.

The path data used to render the text is generated by the 
'Generate Font Data' extension

A part of the code in this file is adaptation of Hershey Text extension
(Copyright 2011, Windell H. Oskay, www.evilmadscientist.com), that comes bundled with Inkscape

Copyright 2019 Shrinivas Kulkarni

This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
"""

from inkex import etree, addNS, Effect
from simpletransform import computePointInNode
from simplestyle import formatStyle
import os, sys

sys.path.append(os.path.dirname(os.path.abspath(__file__))) 
from stroke_font_common import *

class RenderStrokeFontText(Effect):
    def __init__( self ):
        Effect.__init__( self )
        
        self.OptionParser.add_option( "--tab",  #NOTE: value is not used.
            action="store", type="string",
            dest="tab", default="splash",
            help="The active tab when Apply was pressed")
            
        self.OptionParser.add_option( "--action",
            action="store", type="string",
            dest="action", default="render",
            help="The active option when Apply was pressed" )

        self.OptionParser.add_option( "--text",
            action="store", type="string", 
            dest="text", default="Hello World",
            help="The input text to render")
            
        self.OptionParser.add_option( "--fontName",
            action="store", type="string",
            dest="fontName", help="The custom font to be used for rendering")

        self.OptionParser.add_option('--fontSize', action = 'store',
          type = 'float', dest = 'fontSize', default = '100',
          help = 'Size of the font')

        self.OptionParser.add_option('--charSpacing', action = 'store',
          type = 'float', dest = 'charSpacing', default = '1',
          help = 'Spacing between characters')

        self.OptionParser.add_option('--lineSpacing', action = 'store',
          type = 'float', dest = 'lineSpacing', default = '1.5',
          help = 'Spacing between the lines')

    def effect( self ):

        # Embed text in group to make manipulation easier:
        g_attribs = {addNS('label','inkscape'):'Stroke Font Text' }
        g = etree.SubElement(self.current_layer, 'g', g_attribs)
        
        fontSize = self.options.fontSize
        charSpacing = self.options.charSpacing
        lineSpacing = self.options.lineSpacing        
        fontName = self.options.fontName
        
        dataFilePath = os.path.dirname(os.path.abspath(__file__)) + "/" + CommonDefs.dataFileName    
        doc = getDataFileDoc(dataFilePath)
        strokeFontData = FontData(doc, fontName)
        strokeFontData.scaleFont(fontSize)
        crInfo = strokeFontData.crInfo
        
        strokeWidth = 0.02 * fontSize
        
        charStyle = { 'stroke': '#000000', 'fill': 'none', 'stroke-width':strokeWidth, \
            'stroke-linecap':'round', 'stroke-linejoin':'round'}
            
        naStyle = { 'stroke': '#000000', 'fill': '#000000', 'stroke-width':.5}
        
        naMargin = fontSize * .25
        naSize = fontSize * .5
        naD = 'M ' + str(naMargin) + ','+ str(0) +' h ' + str(naSize) + ' v ' +  \
            str(-1 * naSize) + ' h ' + str(-1 * naSize) + ' Z'
        
        spaceWidth = fontSize / 3  * charSpacing
        
        xOffset = 0
        yOffset = 0
        
        if self.options.action == "render":
            chars = unicode(self.options.text, 'utf-8').replace('\\n','\n').replace('\\\n','\\n')
            for char in chars:
                if(char == '\n'):
                    yOffset += fontSize * lineSpacing
                    xOffset = 0
                    continue
                charData = strokeFontData.glyphMap.get(char)
                if(charData != None):
                    rOffset = charData[0]
                    d =  charData[1]
                    style = charStyle
                elif(char == ' '):
                    xOffset += spaceWidth
                    continue
                else:
                    rOffset = fontSize
                    d = naD
                    style = naStyle
                    
                trans = 'translate(' + str(xOffset) + ', '+ str(yOffset)+')'
                attribs = {'style':formatStyle(style), 'd':d, 'transform':trans}
                etree.SubElement(g, addNS('path','svg'), attribs) 
                
                xOffset += rOffset * charSpacing
        else:
            chars = [c for c in strokeFontData.glyphMap.keys()]
            chars = sorted(chars)
            hCnt = 10
            wMax = 0
            
            textStyle = {'fill':'#000000', 'fill-opacity':'1'}
            
            textStyle['font-size'] = str(fontSize)
            attribs = {'style':formatStyle(textStyle)}
            text = etree.SubElement(g, addNS('text','svg'), attribs)
            text.text = "Font: "+fontName
            yOffset = fontSize

            if(crInfo != ""):
                textStyle['font-size'] = str(fontSize / 2)
                trans = 'translate(' + str(0) + ', '+ str(yOffset)+')'
                attribs = {'style':formatStyle(textStyle), 'transform':trans}
                text = etree.SubElement(g, addNS('text','svg'), attribs)
                text.text = crInfo
                yOffset += fontSize
            
            yOffset += fontSize
            
            for i, char in enumerate(chars):
                if(i % hCnt == 0):
                    xOffset = 0
                    if(i > 0):
                        yOffset += fontSize * lineSpacing
                else:
                    xOffset += spaceWidth

                charData = strokeFontData.glyphMap.get(char)
                rOffset = charData[0]
                d =  charData[1]
                
                trans = 'translate(' + str(xOffset) + ', '+ str(yOffset)+')'
                attribs = {'style':formatStyle(charStyle), 'd':d, 'transform':trans}
                etree.SubElement(g, addNS('path','svg'), attribs)                 
                
                xOffset += rOffset
                
                if(xOffset > wMax):
                    wMax = xOffset
                    
            xOffset = wMax
        #  Translate group to center of view, approximately
        view_center = computePointInNode(list(self.view_center), self.current_layer)
        
        t = 'translate(' + str( view_center[0] - xOffset / 2) + ',' + \
            str( view_center[1] - yOffset / 2 ) + ')'
            
        g.set('transform', t)

effect = RenderStrokeFontText()
effect.affect()
